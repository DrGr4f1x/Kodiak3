# This is the CMakeCache file.
# For build in directory: d:/Kodiak3/External/hlsl.bin
# It was generated by CMake: C:/Program Files/CMake/bin/cmake.exe
# You can edit this file to change values found and used by cmake.
# If you do not want to change any of the values, simply exit the editor.
# If you do want to change a value, simply edit, save, and exit the editor.
# The syntax for the file is as follows:
# KEY:TYPE=VALUE
# KEY is the name of a variable in the cache.
# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
# VALUE is the current value for the KEY.

########################
# EXTERNAL cache entries
########################

//Default URL where bug reports are to be submitted.
BUG_REPORT_URL:STRING=http://llvm.org/bugs/

//Build all libraries as shared libraries instead of static
BUILD_SHARED_LIBS:BOOL=OFF

//Build CLANG example programs by default.
CLANG_BUILD_EXAMPLES:BOOL=OFF

//No help, variable specified on the command line.
CLANG_CL:BOOL=OFF

//Default OpenMP runtime used by -fopenmp.
CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp

//Build ARCMT.
CLANG_ENABLE_ARCMT:BOOL=OFF

//Build static analyzer.
CLANG_ENABLE_STATIC_ANALYZER:BOOL=OFF

//Version number that will be placed into the clang executable,
// in the form XX.YY
CLANG_EXECUTABLE_VERSION:STRING=3.7

//Generate build targets for the Clang docs.
CLANG_INCLUDE_DOCS:BOOL=OFF

//Generate build targets for the Clang unit tests.
CLANG_INCLUDE_TESTS:BOOL=OFF

//Order file to use when compiling clang in order to improve startup
// time.
CLANG_ORDER_FILE:FILEPATH=

//Build clang with plugin support
CLANG_PLUGIN_SUPPORT:BOOL=ON

//Vendor-specific text for showing the repository the source is
// taken from.
CLANG_REPOSITORY_STRING:STRING=

//Relative directory from the Clang binary to its resource files.
CLANG_RESOURCE_DIR:STRING=

//Native TableGen executable. Saves building one when cross-compiling.
CLANG_TABLEGEN:STRING=clang-tblgen

//Vendor-specific text for showing with version information.
CLANG_VENDOR:STRING=

//Vendor-specific uti.
CLANG_VENDOR_UTI:STRING=org.llvm.clang

//Semicolon separated list of supported configuration types, only
// supports Debug, Release, MinSizeRel, and RelWithDebInfo, anything
// else will be ignored.
CMAKE_CONFIGURATION_TYPES:STRING=Debug;Release;MinSizeRel;RelWithDebInfo

//Flags used by the compiler during all build types.
CMAKE_CXX_FLAGS:STRING=/DWIN32 /D_WINDOWS /W3 /GR /EHsc

//Flags used by the compiler during debug builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=/D_DEBUG /MDd /Zi /Ob0 /Od /RTC1 -DDBG -UNDEBUG -DDBG -UNDEBUG -DDBG -UNDEBUG -DDBG -UNDEBUG

//Flags used by the compiler during release builds for minimum
// size.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=/MD /O1 /Ob1 /DNDEBUG

//Flags used by the compiler during release builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=/MD /O2 /Ob2 /DNDEBUG

//Flags used by the compiler during release builds with debug info.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=/MD /Zi /O2 /Ob1 /DNDEBUG

//Libraries linked by default with all C++ applications.
CMAKE_CXX_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

//Flags used by the compiler during all build types.
CMAKE_C_FLAGS:STRING=/DWIN32 /D_WINDOWS /W3

//Flags used by the compiler during debug builds.
CMAKE_C_FLAGS_DEBUG:STRING=/D_DEBUG /MDd /Zi /Ob0 /Od /RTC1

//Flags used by the compiler during release builds for minimum
// size.
CMAKE_C_FLAGS_MINSIZEREL:STRING=/MD /O1 /Ob1 /DNDEBUG

//Flags used by the compiler during release builds.
CMAKE_C_FLAGS_RELEASE:STRING=/MD /O2 /Ob2 /DNDEBUG

//Flags used by the compiler during release builds with debug info.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=/MD /Zi /O2 /Ob1 /DNDEBUG

//Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

//Flags used by the linker.
CMAKE_EXE_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during debug builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during release minsize builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during release builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during Release with Debug Info builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//user executables (bin)
CMAKE_INSTALL_BINDIR:PATH=bin

//read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_DATADIR:PATH=

//read-only architecture-independent data root (share)
CMAKE_INSTALL_DATAROOTDIR:PATH=share

//documentation root (DATAROOTDIR/doc/PROJECT_NAME)
CMAKE_INSTALL_DOCDIR:PATH=

//C header files (include)
CMAKE_INSTALL_INCLUDEDIR:PATH=include

//info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_INFODIR:PATH=

//object code libraries (lib)
CMAKE_INSTALL_LIBDIR:PATH=lib

//program executables (libexec)
CMAKE_INSTALL_LIBEXECDIR:PATH=libexec

//locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_LOCALEDIR:PATH=

//modifiable single-machine data (var)
CMAKE_INSTALL_LOCALSTATEDIR:PATH=var

//man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_MANDIR:PATH=

//C header files for non-gcc (/usr/include)
CMAKE_INSTALL_OLDINCLUDEDIR:PATH=/usr/include

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files/LLVM

//system admin executables (sbin)
CMAKE_INSTALL_SBINDIR:PATH=sbin

//modifiable architecture-independent data (com)
CMAKE_INSTALL_SHAREDSTATEDIR:PATH=com

//read-only single-machine data (etc)
CMAKE_INSTALL_SYSCONFDIR:PATH=etc

//Path to a program.
CMAKE_LINKER:FILEPATH=C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/amd64/link.exe

//Flags used by the linker during the creation of modules.
CMAKE_MODULE_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during debug builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during release minsize builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during release builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during Release with Debug Info builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC=LLVM

//RC compiler
CMAKE_RC_COMPILER:FILEPATH=rc

//Flags for Windows Resource Compiler.
CMAKE_RC_FLAGS:STRING=/DWIN32

//Flags used by the linker during the creation of dll's.
CMAKE_SHARED_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during debug builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

//Flags used by the linker during release minsize builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

//Flags used by the linker during release builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

//Flags used by the linker during Release with Debug Info builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

//Flags used by the linker during the creation of static libraries.
CMAKE_STATIC_LINKER_FLAGS:STRING=/machine:x64

//Flags used by the linker during debug builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during release minsize builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during release builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during Release with Debug Info builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//No help, variable specified on the command line.
CMAKE_SYSTEM_VERSION:UNINITIALIZED=10.0.14393.0

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

//Colon separated list of directories clang will search for headers.
C_INCLUDE_DIRS:STRING=

//path to WIN10 SDK header files
D3D12_INCLUDE_DIR:PATH=C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/um

//Path to a library.
D3D12_LIBRARY:FILEPATH=C:/Program Files (x86)/Windows Kits/10/Lib/10.0.16299.0/um/x64/d3d12.lib

//Default <path> to all compiler invocations for --sysroot=<path>.
DEFAULT_SYSROOT:PATH=

//Path to a library.
DIASDK_GUIDS_LIBRARY:FILEPATH=C:/Program Files (x86)/Microsoft Visual Studio 14.0/DIA SDK/lib/amd64/diaguids.lib

//path to DIA SDK header files
DIASDK_INCLUDE_DIR:PATH=C:/Program Files (x86)/Microsoft Visual Studio 14.0/DIA SDK/include

//Path to a library.
DL_LIBRARY_PATH:FILEPATH=DL_LIBRARY_PATH-NOTFOUND

//No help, variable specified on the command line.
DXC_BUILD_ARCH:UNINITIALIZED=x64

//Root location of all external projects
DXC_EXTERNAL_ROOT_DIR:STRING=D:/Kodiak3/External/DirectXShaderCompiler/external

//Location of SPIRV-Headers source
DXC_SPIRV_HEADERS_DIR:STRING=D:/Kodiak3/External/DirectXShaderCompiler/external/SPIRV-Headers

//Location of SPIRV-Tools source
DXC_SPIRV_TOOLS_DIR:STRING=D:/Kodiak3/External/DirectXShaderCompiler/external/SPIRV-Tools

//path to WIN10 SDK header files
DXGI_INCLUDE_DIR:PATH=C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/shared

//Path to a library.
DXGI_LIBRARY:FILEPATH=C:/Program Files (x86)/Windows Kits/10/Lib/10.0.16299.0/um/x64/dxgi.lib

//Enables SPIR-V code generation.
ENABLE_SPIRV_CODEGEN:BOOL=ON

//Additional directory, where CMake should search for ffi.h or
// ffi/ffi.h
FFI_INCLUDE_DIR:PATH=

//Additional directory, where CMake should search for libffi.so
FFI_LIBRARY_DIR:PATH=

//Directory where gcc is installed.
GCC_INSTALL_PREFIX:PATH=

//The gold linker
GOLD_EXECUTABLE:FILEPATH=GOLD_EXECUTABLE-NOTFOUND

//Enables compiler analysis during compilation.
HLSL_ENABLE_ANALYZE:BOOL=OFF

//Sets up fixed version information.
HLSL_ENABLE_FIXED_VER:BOOL=OFF

//No help, variable specified on the command line.
HLSL_INCLUDE_TESTS:BOOL=ON

//Include optional projects in default build target.
HLSL_OPTIONAL_PROJS_IN_DEFAULT:BOOL=OFF

//Build libclang as a static library (in addition to a shared one)
LIBCLANG_BUILD_STATIC:BOOL=ON

//Version number that will be placed into the libclang library
// , in the form XX.YY
LIBCLANG_LIBRARY_VERSION:STRING=3.7

//Path to a file.
LIBXML2_INCLUDE_DIR:PATH=LIBXML2_INCLUDE_DIR-NOTFOUND

//Path to a library.
LIBXML2_LIBRARIES:FILEPATH=LIBXML2_LIBRARIES-NOTFOUND

//Path to a program.
LIBXML2_XMLLINT_EXECUTABLE:FILEPATH=LIBXML2_XMLLINT_EXECUTABLE-NOTFOUND

//Static link Polly into tools
LINK_POLLY_INTO_TOOLS:BOOL=OFF

//Dependencies for target
LLVMAnalysis_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMAsmParser_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMBitReader_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMBitWriter_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMCore_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMDxcSupport_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMHLSL_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMIRReader_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMInstCombine_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMLTO_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMLinker_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMMSSupport_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMOption_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMProfileData_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMScalarOpts_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMSupport_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMTableGen_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMTarget_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMTransformUtils_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMVectorize_LIB_DEPENDS:STATIC=

//Enable abi-breaking checks.  Can be WITH_ASSERTS, FORCE_ON or
// FORCE_OFF.
LLVM_ABI_BREAKING_CHECKS:STRING=WITH_ASSERTS

//Append the version control system revision id to LLVM version
LLVM_APPEND_VC_REV:BOOL=ON

//Value Computed by CMake
LLVM_BINARY_DIR:STATIC=D:/Kodiak3/External/hlsl.bin

//PATH to binutils/include containing plugin-api.h for gold plugin.
LLVM_BINUTILS_INCDIR:PATH=

//Build the llvm documentation.
LLVM_BUILD_DOCS:BOOL=OFF

//Build the LLVM example programs. If OFF, just generate build
// targets.
LLVM_BUILD_EXAMPLES:BOOL=OFF

//Build compiler-rt as an external project.
LLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=OFF

//Build libllvm dynamic library
LLVM_BUILD_LLVM_DYLIB:BOOL=OFF

//Build the LLVM runtime libraries.
LLVM_BUILD_RUNTIME:BOOL=ON

//Build LLVM unit tests. If OFF, just generate build targets.
LLVM_BUILD_TESTS:BOOL=OFF

//Build the LLVM tools. If OFF, just generate build targets.
LLVM_BUILD_TOOLS:BOOL=ON

//Number of parallel compiler jobs. 0 means use all processors.
// Default is 0.
LLVM_COMPILER_JOBS:STRING=0

//No help, variable specified on the command line.
LLVM_DEFAULT_TARGET_TRIPLE:STRING=dxil-ms-dx

//Disable llvm-shlib's atexit destructors.
LLVM_DISABLE_LLVM_DYLIB_ATEXIT:BOOL=ON

//Export all symbols from libLLVM.dylib (default is C API only
LLVM_DYLIB_EXPORT_ALL:BOOL=OFF

//Enable assertions
LLVM_ENABLE_ASSERTIONS:BOOL=ON

//Enable embedding backtraces on crash.
LLVM_ENABLE_BACKTRACES:BOOL=ON

//Enable crash overrides.
LLVM_ENABLE_CRASH_OVERRIDES:BOOL=ON

//Compile with C++1y enabled.
LLVM_ENABLE_CXX1Y:BOOL=OFF

//Use doxygen to generate llvm API documentation.
LLVM_ENABLE_DOXYGEN:BOOL=OFF

//Enable Exception handling
LLVM_ENABLE_EH:BOOL=ON

//Use libffi to call external functions from the interpreter
LLVM_ENABLE_FFI:BOOL=OFF

//Use libc++ if available.
LLVM_ENABLE_LIBCXX:BOOL=OFF

//Use libc++abi when using libc++.
LLVM_ENABLE_LIBCXXABI:BOOL=OFF

//Compile with C++ modules enabled.
LLVM_ENABLE_MODULES:BOOL=OFF

//Compile with pedantic enabled.
LLVM_ENABLE_PEDANTIC:BOOL=ON

//Build Position-Independent Code
LLVM_ENABLE_PIC:BOOL=ON

//Enable run time type information
LLVM_ENABLE_RTTI:BOOL=ON

//Use Sphinx to generate llvm documentation.
LLVM_ENABLE_SPHINX:BOOL=OFF

//Use terminfo database if available.
LLVM_ENABLE_TERMINFO:BOOL=ON

//Use threads if available.
LLVM_ENABLE_THREADS:BOOL=ON

//Enable embedding timestamp information in build
LLVM_ENABLE_TIMESTAMPS:BOOL=ON

//Enable compiler warnings.
LLVM_ENABLE_WARNINGS:BOOL=ON

//Fail and stop if a warning is triggered.
LLVM_ENABLE_WERROR:BOOL=OFF

//Use zlib for compression/decompression if available.
LLVM_ENABLE_ZLIB:BOOL=ON

//Semicolon-separated list of experimental targets to build.
LLVM_EXPERIMENTAL_TARGETS_TO_BUILD:STRING=

//Whether to build clang as part of LLVM
LLVM_EXTERNAL_CLANG_BUILD:BOOL=ON

//Set to ON to force using an old, unsupported host toolchain.
LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN:BOOL=OFF

//Host on which LLVM binaries will run
LLVM_HOST_TRIPLE:STRING=x86_64-pc-win32

//Generate build targets for llvm documentation.
LLVM_INCLUDE_DOCS:BOOL=OFF

//Generate build targets for the LLVM examples
LLVM_INCLUDE_EXAMPLES:BOOL=OFF

//Generate build targets for the LLVM unit tests.
LLVM_INCLUDE_TESTS:BOOL=OFF

//Generate build targets for the LLVM tools.
LLVM_INCLUDE_TOOLS:BOOL=ON

//Generate build targets for the LLVM utils.
LLVM_INCLUDE_UTILS:BOOL=ON

//Only include toolchain files in the 'install' target.
LLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF

//Include utility binaries in the 'install' target.
LLVM_INSTALL_UTILS:BOOL=OFF

//Define suffix of library directory name (32/64)
LLVM_LIBDIR_SUFFIX:STRING=

//Default options for lit
LLVM_LIT_ARGS:STRING=-sv --no-progress-bar

//Path to GnuWin32 tools
LLVM_LIT_TOOLS_DIR:PATH=

//Force TableGen to be built with optimization
LLVM_OPTIMIZED_TABLEGEN:BOOL=OFF

//Define the maximum number of concurrent compilation jobs.
LLVM_PARALLEL_COMPILE_JOBS:STRING=

//Define the maximum number of concurrent link jobs.
LLVM_PARALLEL_LINK_JOBS:STRING=

//No help, variable specified on the command line.
LLVM_REQUIRES_EH:BOOL=ON

//No help, variable specified on the command line.
LLVM_REQUIRES_RTTI:BOOL=ON

//Value Computed by CMake
LLVM_SOURCE_DIR:STATIC=D:/Kodiak3/External/DirectXShaderCompiler

//Native TableGen executable. Saves building one when cross-compiling.
LLVM_TABLEGEN:STRING=llvm-tblgen

//No help, variable specified on the command line.
LLVM_TARGETS_TO_BUILD:STRING=None

//Set target to use for LLVM JIT or use "host" for automatic detection.
LLVM_TARGET_ARCH:STRING=host

//Specify VC++ CRT to use for Debug configurations.
LLVM_USE_CRT_DEBUG:STRING=MDd

//Specify VC++ CRT to use for MinSizeRel configurations.
LLVM_USE_CRT_MINSIZEREL:STRING=MD

//Specify VC++ CRT to use for Release configurations.
LLVM_USE_CRT_RELEASE:STRING=MD

//Specify VC++ CRT to use for RelWithDebInfo configurations.
LLVM_USE_CRT_RELWITHDEBINFO:STRING=MD

//Enable solution folders in Visual Studio. Disable for Express
// versions.
LLVM_USE_FOLDERS:BOOL=ON

//Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011
// about JIT code
LLVM_USE_INTEL_JITEVENTS:BOOL=OFF

//Use opagent JIT interface to inform OProfile about JIT code
LLVM_USE_OPROFILE:BOOL=OFF

//Define the sanitizer used to build binaries and tests.
LLVM_USE_SANITIZER:STRING=

//Use -gsplit-dwarf when compiling llvm.
LLVM_USE_SPLIT_DWARF:BOOL=OFF

//Dependencies for target
LLVMipa_LIB_DEPENDS:STATIC=

//Dependencies for target
LLVMipo_LIB_DEPENDS:STATIC=

//Path to a program.
OCAMLFIND:FILEPATH=OCAMLFIND-NOTFOUND

//pkg-config executable
PKG_CONFIG_EXECUTABLE:FILEPATH=PKG_CONFIG_EXECUTABLE-NOTFOUND

//Path to a program.
PYTHON_EXECUTABLE:FILEPATH=C:/Python/Python3.6/python.exe

//Skip installation
SKIP_SPIRV_TOOLS_INSTALL:BOOL=OFF

//Dependencies for target
SPIRV-Headers-example-1.1_LIB_DEPENDS:STATIC=

//Dependencies for target
SPIRV-Headers-example_LIB_DEPENDS:STATIC=

//Value Computed by CMake
SPIRV-Headers_BINARY_DIR:STATIC=D:/Kodiak3/External/hlsl.bin/external/SPIRV-Headers

//Value Computed by CMake
SPIRV-Headers_SOURCE_DIR:STATIC=D:/Kodiak3/External/DirectXShaderCompiler/external/SPIRV-Headers

//Dependencies for the target
SPIRV-Tools-opt_LIB_DEPENDS:STATIC=general;SPIRV-Tools;

//Dependencies for target
SPIRV-Tools_LIB_DEPENDS:STATIC=

//Build SPIR-V compressing codec
SPIRV_BUILD_COMPRESSION:BOOL=OFF

//Build targets for the SPIR-V unit tests.
SPIRV_BUILD_TESTS:BOOL=OFF

//Enable color terminal output
SPIRV_COLOR_TERMINAL:BOOL=ON

//Enable excessive debug output
SPIRV_LOG_DEBUG:BOOL=OFF

//Skip building the executable and tests along with the library
SPIRV_SKIP_EXECUTABLES:BOOL=ON

//Skip building tests along with the library
SPIRV_SKIP_TESTS:BOOL=OFF

//Install Emacs helper to disassemble/assemble SPIR-V binaries
// on file load/save.
SPIRV_TOOLS_INSTALL_EMACS_HELPERS:BOOL=OFF

//Enable error on warning
SPIRV_WERROR:BOOL=ON

//Path to a library.
TAEF_COMMON_LIBRARY:FILEPATH=D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/TE.Common.lib

//path to TAEF header files
TAEF_INCLUDE_DIR:PATH=D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Include

//Path to a library.
TAEF_WEX_COMMON_LIBRARY:FILEPATH=D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/Wex.Common.lib

//Path to a library.
TAEF_WEX_LOGGER_LIBRARY:FILEPATH=D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/Wex.Logger.lib

TEMP_WIN10_SDK_VERSION:STRING=D:/Kodiak3/External/DirectXShaderCompiler/tools/clang/unittests/HLSL/10.0.16299

//Plist name
TOOL_INFO_PLIST:STRING=Info.plist

VS15_C_PATH32:STRING=C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE

VS15_E_PATH32:STRING=C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE

VS15_P_PATH32:STRING=C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/Common7/IDE

VS_PATH32:STRING=C:/Program Files (x86)/Microsoft Visual Studio 14.0/Common7/IDE

VS_PATH64:STRING=C:/Program Files (x86)/Microsoft Visual Studio 14.0/Common7/IDE

//VS startup project in solution
VS_STARTUP_PROJECT:STRING=dndxc

WIN10_SDK_PATH:STRING=C:/Program Files (x86)/Windows Kits/10

WINDOWS_KIT_10_PATH:STRING=C:/Program Files (x86)/Windows Kits/10

WINDOWS_KIT_81_PATH:STRING=C:/Program Files (x86)/Windows Kits/8.1

//Build LLVM with Polly
WITH_POLLY:BOOL=ON

//Dependencies for the target
clang-hlsl-tests_LIB_DEPENDS:STATIC=general;LLVMSupport;general;LLVMMSSupport;general;LLVMDxcSupport;general;LLVMHLSL;general;LLVMOption;general;LLVMBitReader;general;LLVMBitWriter;general;LLVMAnalysis;general;LLVMipa;general;LLVMIRReader;general;dxcompiler;general;D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/TE.Common.lib;general;D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/Wex.Common.lib;general;D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/Wex.Logger.lib;general;C:/Program Files (x86)/Microsoft Visual Studio 14.0/DIA SDK/lib/amd64/diaguids.lib;general;C:/Program Files (x86)/Windows Kits/10/Lib/10.0.16299.0/um/x64/d3d12.lib;general;C:/Program Files (x86)/Windows Kits/10/Lib/10.0.16299.0/um/x64/dxgi.lib;

//Dependencies for target
clangASTMatchers_LIB_DEPENDS:STATIC=

//Dependencies for target
clangAST_LIB_DEPENDS:STATIC=

//Dependencies for target
clangAnalysis_LIB_DEPENDS:STATIC=

//Dependencies for target
clangBasic_LIB_DEPENDS:STATIC=

//Dependencies for target
clangCodeGen_LIB_DEPENDS:STATIC=

//Dependencies for target
clangDriver_LIB_DEPENDS:STATIC=

//Dependencies for target
clangEdit_LIB_DEPENDS:STATIC=

//Dependencies for target
clangFormat_LIB_DEPENDS:STATIC=

//Dependencies for target
clangFrontendTool_LIB_DEPENDS:STATIC=

//Dependencies for target
clangFrontend_LIB_DEPENDS:STATIC=

//Dependencies for target
clangIndex_LIB_DEPENDS:STATIC=

//Dependencies for target
clangLex_LIB_DEPENDS:STATIC=

//Dependencies for target
clangParse_LIB_DEPENDS:STATIC=

//Dependencies for target
clangRewriteFrontend_LIB_DEPENDS:STATIC=

//Dependencies for target
clangRewrite_LIB_DEPENDS:STATIC=

//Dependencies for target
clangSPIRV_LIB_DEPENDS:STATIC=

//Dependencies for target
clangSema_LIB_DEPENDS:STATIC=

//Dependencies for target
clangToolingCore_LIB_DEPENDS:STATIC=

//Dependencies for target
clangTooling_LIB_DEPENDS:STATIC=

//Dependencies for the target
d3dcompiler_dxc_bridge_LIB_DEPENDS:STATIC=general;dxcompiler;

//Dependencies for the target
dxcompiler_LIB_DEPENDS:STATIC=general;LLVMAnalysis;general;LLVMAsmParser;general;LLVMBitReader;general;LLVMBitWriter;general;LLVMCore;general;LLVMDxcSupport;general;LLVMHLSL;general;LLVMInstCombine;general;LLVMipa;general;LLVMipo;general;LLVMIRReader;general;LLVMLinker;general;LLVMLTO;general;LLVMMSSupport;general;LLVMOption;general;LLVMProfileData;general;LLVMScalarOpts;general;LLVMSupport;general;LLVMTarget;general;LLVMTransformUtils;general;LLVMVectorize;general;clangIndex;general;clangRewrite;general;clangCodeGen;general;clangRewriteFrontend;general;clangFrontend;general;clangDriver;general;clangSema;general;clangEdit;general;clangAST;general;clangCodeGen;general;clangLex;general;clangTooling;general;clangBasic;general;libclang;general;C:/Program Files (x86)/Microsoft Visual Studio 14.0/DIA SDK/lib/amd64/diaguids.lib;general;clangSPIRV;

//Dependencies for the target
dxlib_sample_LIB_DEPENDS:STATIC=general;LLVMAnalysis;general;LLVMipa;general;LLVMDxcSupport;general;LLVMHLSL;general;LLVMOption;general;LLVMSupport;general;dxcompiler;

//Path to a program.
git_executable:FILEPATH=C:/Program Files (x86)/Git/bin/git.exe

//Dependencies for target
libclang_LIB_DEPENDS:STATIC=

//Value Computed by CMake
spirv-tools_BINARY_DIR:STATIC=D:/Kodiak3/External/hlsl.bin/external/SPIRV-Tools

//Value Computed by CMake
spirv-tools_SOURCE_DIR:STATIC=D:/Kodiak3/External/DirectXShaderCompiler/external/SPIRV-Tools


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CLANG_EXECUTABLE_VERSION
CLANG_EXECUTABLE_VERSION-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL=d:/Kodiak3/External/hlsl.bin
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL=7
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL=2
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=C:/Program Files/CMake/bin/cmake.exe
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=C:/Program Files/CMake/bin/cpack.exe
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=C:/Program Files/CMake/bin/ctest.exe
//ADVANCED property for variable: CMAKE_CXX_FLAGS
CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_STANDARD_LIBRARIES
CMAKE_CXX_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_STANDARD_LIBRARIES
CMAKE_C_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=Unknown
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=Visual Studio 14 2015 Win64
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL=D:/Kodiak3/External/DirectXShaderCompiler
//ADVANCED property for variable: CMAKE_INSTALL_BINDIR
CMAKE_INSTALL_BINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATADIR
CMAKE_INSTALL_DATADIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DATAROOTDIR
CMAKE_INSTALL_DATAROOTDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_DOCDIR
CMAKE_INSTALL_DOCDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INCLUDEDIR
CMAKE_INSTALL_INCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_INFODIR
CMAKE_INSTALL_INFODIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBDIR
CMAKE_INSTALL_LIBDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LIBEXECDIR
CMAKE_INSTALL_LIBEXECDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALEDIR
CMAKE_INSTALL_LOCALEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_LOCALSTATEDIR
CMAKE_INSTALL_LOCALSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_MANDIR
CMAKE_INSTALL_MANDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_OLDINCLUDEDIR
CMAKE_INSTALL_OLDINCLUDEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SBINDIR
CMAKE_INSTALL_SBINDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SHAREDSTATEDIR
CMAKE_INSTALL_SHAREDSTATEDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_INSTALL_SYSCONFDIR
CMAKE_INSTALL_SYSCONFDIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=101
//ADVANCED property for variable: CMAKE_RC_COMPILER
CMAKE_RC_COMPILER-ADVANCED:INTERNAL=1
CMAKE_RC_COMPILER_WORKS:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS
CMAKE_RC_FLAGS-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL=C:/Program Files/CMake/share/cmake-3.7
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
//Details about finding D3D12
FIND_PACKAGE_MESSAGE_DETAILS_D3D12:INTERNAL=[C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/um;C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/shared][C:/Program Files (x86)/Windows Kits/10/Lib/10.0.16299.0/um/x64/d3d12.lib;C:/Program Files (x86)/Windows Kits/10/Lib/10.0.16299.0/um/x64/dxgi.lib][v()]
//Details about finding DIASDK
FIND_PACKAGE_MESSAGE_DETAILS_DIASDK:INTERNAL=[C:/Program Files (x86)/Microsoft Visual Studio 14.0/DIA SDK/lib/amd64/diaguids.lib][C:/Program Files (x86)/Microsoft Visual Studio 14.0/DIA SDK/include][v()]
//Details about finding PythonInterp
FIND_PACKAGE_MESSAGE_DETAILS_PythonInterp:INTERNAL=[C:/Python/Python3.6/python.exe][v3.6()]
//Details about finding TAEF
FIND_PACKAGE_MESSAGE_DETAILS_TAEF:INTERNAL=[D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Library/x64/TE.Common.lib][D:/Kodiak3/External/DirectXShaderCompiler/external/taef/build/Include][v()]
//Have symbol backtrace
HAVE_BACKTRACE:INTERNAL=
//Have symbol closedir
HAVE_CLOSEDIR:INTERNAL=
//Test HAVE_CXXABI_H
HAVE_CXXABI_H:INTERNAL=
//Have symbol arc4random
HAVE_DECL_ARC4RANDOM:INTERNAL=
//Have symbol FE_ALL_EXCEPT
HAVE_DECL_FE_ALL_EXCEPT:INTERNAL=1
//Have symbol FE_INEXACT
HAVE_DECL_FE_INEXACT:INTERNAL=1
//Have symbol strerror_s
HAVE_DECL_STRERROR_S:INTERNAL=1
//Have include dirent.h
HAVE_DIRENT_H:INTERNAL=
//Have include dlfcn.h
HAVE_DLFCN_H:INTERNAL=
//Test HAVE_ELMCB_PCSTR
HAVE_ELMCB_PCSTR:INTERNAL=1
//Have include errno.h
HAVE_ERRNO_H:INTERNAL=1
//Have include execinfo.h
HAVE_EXECINFO_H:INTERNAL=
//Have include fcntl.h
HAVE_FCNTL_H:INTERNAL=1
//Have include fenv.h
HAVE_FENV_H:INTERNAL=1
//Have symbol futimens
HAVE_FUTIMENS:INTERNAL=
//Have symbol futimes
HAVE_FUTIMES:INTERNAL=
//Have symbol getcwd
HAVE_GETCWD:INTERNAL=
//Have symbol getpagesize
HAVE_GETPAGESIZE:INTERNAL=
//Have symbol getrlimit
HAVE_GETRLIMIT:INTERNAL=
//Have symbol getrusage
HAVE_GETRUSAGE:INTERNAL=
//Have symbol gettimeofday
HAVE_GETTIMEOFDAY:INTERNAL=
//Have include histedit.h
HAVE_HISTEDIT_H:INTERNAL=
//Test HAVE_INT64_T
HAVE_INT64_T:INTERNAL=1
//Have include inttypes.h
HAVE_INTTYPES_H:INTERNAL=1
//Have symbol isatty
HAVE_ISATTY:INTERNAL=
//Have include limits.h
HAVE_LIMITS_H:INTERNAL=1
//Have include link.h
HAVE_LINK_H:INTERNAL=
//Have include mach/mach.h
HAVE_MACH_MACH_H:INTERNAL=
//Have include mach-o/dyld.h
HAVE_MACH_O_DYLD_H:INTERNAL=
//Have symbol mallctl
HAVE_MALLCTL:INTERNAL=
//Have symbol mallinfo
HAVE_MALLINFO:INTERNAL=
//Have include malloc.h
HAVE_MALLOC_H:INTERNAL=1
//Have include malloc/malloc.h
HAVE_MALLOC_MALLOC_H:INTERNAL=
//Have symbol malloc_zone_statistics
HAVE_MALLOC_ZONE_STATISTICS:INTERNAL=
//Have symbol mkdtemp
HAVE_MKDTEMP:INTERNAL=
//Have symbol mkstemp
HAVE_MKSTEMP:INTERNAL=
//Have symbol mktemp
HAVE_MKTEMP:INTERNAL=
//Have include ndir.h
HAVE_NDIR_H:INTERNAL=
//Have symbol opendir
HAVE_OPENDIR:INTERNAL=
//Have symbol posix_spawn
HAVE_POSIX_SPAWN:INTERNAL=
//Have symbol pread
HAVE_PREAD:INTERNAL=
//Have symbol srand48
HAVE_RAND48_SRAND48:INTERNAL=
//Have symbol readdir
HAVE_READDIR:INTERNAL=
//Have symbol realpath
HAVE_REALPATH:INTERNAL=
//Have symbol sbrk
HAVE_SBRK:INTERNAL=
//Have symbol setenv
HAVE_SETENV:INTERNAL=
//Have symbol setrlimit
HAVE_SETRLIMIT:INTERNAL=
//Have include signal.h
HAVE_SIGNAL_H:INTERNAL=1
//Have include stdint.h
HAVE_STDINT_H:INTERNAL=1
//Have symbol strerror
HAVE_STRERROR:INTERNAL=1
//Have symbol strerror_r
HAVE_STRERROR_R:INTERNAL=
//Have symbol strtoll
HAVE_STRTOLL:INTERNAL=1
//Have symbol strtoq
HAVE_STRTOQ:INTERNAL=
//Have include sys/dir.h
HAVE_SYS_DIR_H:INTERNAL=
//Have include sys/ioctl.h
HAVE_SYS_IOCTL_H:INTERNAL=
//Have include sys/mman.h
HAVE_SYS_MMAN_H:INTERNAL=
//Have include sys/ndir.h
HAVE_SYS_NDIR_H:INTERNAL=
//Have include sys/param.h
HAVE_SYS_PARAM_H:INTERNAL=
//Have include sys/resource.h
HAVE_SYS_RESOURCE_H:INTERNAL=
//Have include sys/stat.h
HAVE_SYS_STAT_H:INTERNAL=1
//Have include sys/time.h
HAVE_SYS_TIME_H:INTERNAL=
//Have include sys/uio.h
HAVE_SYS_UIO_H:INTERNAL=
//Have include sys/wait.h
HAVE_SYS_WAIT_H:INTERNAL=
//Have include termios.h
HAVE_TERMIOS_H:INTERNAL=
//Test HAVE_UINT64_T
HAVE_UINT64_T:INTERNAL=1
//Have include unistd.h
HAVE_UNISTD_H:INTERNAL=
//Have include utime.h
HAVE_UTIME_H:INTERNAL=
//Test HAVE_U_INT64_T
HAVE_U_INT64_T:INTERNAL=
//Have include valgrind/valgrind.h
HAVE_VALGRIND_VALGRIND_H:INTERNAL=
//Have include zlib.h
HAVE_ZLIB_H:INTERNAL=
//Have function _alloca
HAVE__ALLOCA:INTERNAL=
//Have symbol _chsize_s
HAVE__CHSIZE_S:INTERNAL=1
//Have function __alloca
HAVE___ALLOCA:INTERNAL=
//Have function __ashldi3
HAVE___ASHLDI3:INTERNAL=
//Have function __ashrdi3
HAVE___ASHRDI3:INTERNAL=
//Have function __chkstk
HAVE___CHKSTK:INTERNAL=1
//Have function __chkstk_ms
HAVE___CHKSTK_MS:INTERNAL=
//Have function __cmpdi2
HAVE___CMPDI2:INTERNAL=
//Have function __divdi3
HAVE___DIVDI3:INTERNAL=
//Have function __fixdfdi
HAVE___FIXDFDI:INTERNAL=
//Have function __fixsfdi
HAVE___FIXSFDI:INTERNAL=
//Have function __floatdidf
HAVE___FLOATDIDF:INTERNAL=
//Have function __lshrdi3
HAVE___LSHRDI3:INTERNAL=
//Have function __main
HAVE___MAIN:INTERNAL=
//Have function __moddi3
HAVE___MODDI3:INTERNAL=
//Have function __udivdi3
HAVE___UDIVDI3:INTERNAL=
//Have function __umoddi3
HAVE___UMODDI3:INTERNAL=
//Have function ___chkstk
HAVE____CHKSTK:INTERNAL=
//Have function ___chkstk_ms
HAVE____CHKSTK_MS:INTERNAL=
//ADVANCED property for variable: LIBCLANG_LIBRARY_VERSION
LIBCLANG_LIBRARY_VERSION-ADVANCED:INTERNAL=1
//ADVANCED property for variable: LIBXML2_INCLUDE_DIR
LIBXML2_INCLUDE_DIR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: LIBXML2_LIBRARIES
LIBXML2_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: LIBXML2_XMLLINT_EXECUTABLE
LIBXML2_XMLLINT_EXECUTABLE-ADVANCED:INTERNAL=1
//Test LLVM_HAS_ATOMICS
LLVM_HAS_ATOMICS:INTERNAL=1
//STRINGS property for variable: LLVM_USE_CRT_DEBUG
LLVM_USE_CRT_DEBUG-STRINGS:INTERNAL=MD;MDd;MT;MTd
//STRINGS property for variable: LLVM_USE_CRT_MINSIZEREL
LLVM_USE_CRT_MINSIZEREL-STRINGS:INTERNAL=MD;MDd;MT;MTd
//STRINGS property for variable: LLVM_USE_CRT_RELEASE
LLVM_USE_CRT_RELEASE-STRINGS:INTERNAL=MD;MDd;MT;MTd
//STRINGS property for variable: LLVM_USE_CRT_RELWITHDEBINFO
LLVM_USE_CRT_RELWITHDEBINFO-STRINGS:INTERNAL=MD;MDd;MT;MTd
//Have symbol __GLIBC__
LLVM_USING_GLIBC:INTERNAL=
//ADVANCED property for variable: OCAMLFIND
OCAMLFIND-ADVANCED:INTERNAL=1
PC_LIBXML_CFLAGS:INTERNAL=
PC_LIBXML_CFLAGS_I:INTERNAL=
PC_LIBXML_CFLAGS_OTHER:INTERNAL=
PC_LIBXML_FOUND:INTERNAL=
PC_LIBXML_INCLUDEDIR:INTERNAL=
PC_LIBXML_LIBDIR:INTERNAL=
PC_LIBXML_LIBS:INTERNAL=
PC_LIBXML_LIBS_L:INTERNAL=
PC_LIBXML_LIBS_OTHER:INTERNAL=
PC_LIBXML_LIBS_PATHS:INTERNAL=
PC_LIBXML_PREFIX:INTERNAL=
PC_LIBXML_STATIC_CFLAGS:INTERNAL=
PC_LIBXML_STATIC_CFLAGS_I:INTERNAL=
PC_LIBXML_STATIC_CFLAGS_OTHER:INTERNAL=
PC_LIBXML_STATIC_LIBDIR:INTERNAL=
PC_LIBXML_STATIC_LIBS:INTERNAL=
PC_LIBXML_STATIC_LIBS_L:INTERNAL=
PC_LIBXML_STATIC_LIBS_OTHER:INTERNAL=
PC_LIBXML_STATIC_LIBS_PATHS:INTERNAL=
PC_LIBXML_VERSION:INTERNAL=
//ADVANCED property for variable: PKG_CONFIG_EXECUTABLE
PKG_CONFIG_EXECUTABLE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: PYTHON_EXECUTABLE
PYTHON_EXECUTABLE-ADVANCED:INTERNAL=1
//Test SUPPORTS_NO_VARIADIC_MACROS_FLAG
SUPPORTS_NO_VARIADIC_MACROS_FLAG:INTERNAL=
//Test SUPPORTS_SIZED_DEALLOC
SUPPORTS_SIZED_DEALLOC:INTERNAL=1
//ADVANCED property for variable: TAEF_INCLUDE_DIR
TAEF_INCLUDE_DIR-ADVANCED:INTERNAL=1
//CMAKE_INSTALL_PREFIX during last run
_GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX:INTERNAL=C:/Program Files/LLVM
__pkg_config_checked_PC_LIBXML:INTERNAL=1
//Stored GUID
dndxc_GUID_CMAKE:INTERNAL=0A863FD1-FD94-42CF-8190-A3CA605A6459

